{"version":3,"file":"react-decision-tree-flow.esm.js","sources":["../src/Shared.tsx","../src/Wizard.tsx","../src/Controls.tsx","../src/Step.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nexport interface Tree {\r\n  readonly [step: string]: readonly string[];\r\n}\r\n\r\nexport type ControlType<T extends Tree> = Record<keyof T, () => void>;\r\n\r\nexport interface WizardContextProps<T extends Tree> {\r\n  tree: T;\r\n  step: string;\r\n  setStep: React.Dispatch<React.SetStateAction<keyof T>>;\r\n  getControls: () => ControlType<T>;\r\n}\r\n\r\nexport const WizardContext = React.createContext<WizardContextProps<any>>({\r\n  tree: {},\r\n  step: '',\r\n  setStep: () => {},\r\n  getControls: () => ({}),\r\n});\r\n","import React, { PropsWithChildren, ReactElement } from 'react';\r\nimport { Tree, ControlType, WizardContext } from './Shared';\r\n\r\nexport interface WizardProps<T extends Tree> {\r\n  tree: T;\r\n  first: keyof T;\r\n}\r\n\r\n/**\r\n * Declarative Wizard component for React.\r\n * @param props Takes in a tree, the first step of the wizard, and children.\r\n */\r\nexport function Wizard<T extends Tree>({\r\n  children,\r\n  tree,\r\n  first,\r\n}: PropsWithChildren<WizardProps<T>>): ReactElement {\r\n  // Check tree for bad values\r\n  React.useEffect(() => {\r\n    const allSteps = Object.keys(tree);\r\n    if (!allSteps.includes(first as string)) {\r\n      console.warn(`First step ${first} is now found in tree as key`);\r\n    }\r\n  }, [first, tree]);\r\n  React.useEffect(() => {\r\n    const allSteps = Object.keys(tree);\r\n    Object.entries(tree).forEach(([key, dests]) => {\r\n      dests.forEach(d => {\r\n        if (!allSteps.includes(d)) {\r\n          console.warn(\r\n            `Tree definition includes path to ${d} from ${key}. However ${d} is not in tree as a key.`\r\n          );\r\n        }\r\n      });\r\n    });\r\n  }, [tree]);\r\n\r\n  const [step, setStep] = React.useState<keyof T>(first);\r\n\r\n  const getControls = () => {\r\n    const possibleSteps = tree[step];\r\n    return possibleSteps.reduce<ControlType<T>>((accum, step) => {\r\n      const next = {\r\n        [step]: () => {\r\n          setStep(step);\r\n        },\r\n      };\r\n      return {\r\n        ...accum,\r\n        ...next,\r\n      };\r\n    }, {} as ControlType<T>);\r\n  };\r\n\r\n  return (\r\n    <WizardContext.Provider\r\n      value={{\r\n        tree,\r\n        step: step as string,\r\n        setStep: setStep as React.Dispatch<React.SetStateAction<any>>,\r\n        getControls: getControls as () => Record<string, any>,\r\n      }}\r\n    >\r\n      {children}\r\n    </WizardContext.Provider>\r\n  );\r\n}\r\n","import React, { PropsWithChildren } from 'react';\r\nimport { Tree, WizardContext, WizardContextProps } from './Shared';\r\n\r\nexport interface ControlHook<T extends Tree> {\r\n  step: keyof T;\r\n  tree: T;\r\n  destinations: Record<keyof T, () => void>;\r\n}\r\n\r\n/**\r\n * A react hook that exposes the current step, possible destinations, and the tree being used.\r\n * Destinations is an object where the keys are possible destinations and the values are\r\n * functions to move the wizard there.\r\n */\r\nexport function useControls<T extends Tree>(): ControlHook<T> {\r\n  const { getControls, step, tree } = React.useContext(\r\n    WizardContext as React.Context<WizardContextProps<T>>\r\n  );\r\n  return { step, tree, destinations: getControls() };\r\n}\r\n\r\nexport interface ControlProps<T extends Tree> {\r\n  children: (steps: ControlHook<T>) => React.ReactNode;\r\n}\r\n\r\n/**\r\n * Controls React Component\r\n * @param ChildrenRenderProp Children is a function that exposes the current step, possible destinations,\r\n * and the tree being used. Destinations is an object where the keys are possible destinations and the\r\n * values are functions to move the wizard there.\r\n */\r\nexport function Controls<T extends Tree>({\r\n  children,\r\n}: PropsWithChildren<ControlProps<T>>) {\r\n  const getControls = useControls<T>();\r\n  return <>{children({ ...getControls })}</>;\r\n}\r\n","import React, { PropsWithChildren } from 'react';\r\nimport { Tree } from './Shared';\r\nimport { useControls } from './Controls';\r\n\r\nexport interface StepProps<T> {\r\n  name: keyof T;\r\n}\r\n\r\n/**\r\n * A Step to be used in the Wizard component. Will only be rendered if the name is the active step\r\n * @param props name of the step and children.\r\n */\r\nexport function Step<T extends Tree>({\r\n  children,\r\n  name,\r\n}: PropsWithChildren<StepProps<T>>) {\r\n  const { step, tree } = useControls<T>();\r\n\r\n  // Check if name is bad value\r\n  React.useEffect(() => {\r\n    if (!Object.keys(tree).includes(name as string)) {\r\n      console.warn(\r\n        `Step component with name ${name} is not found in step tree!`\r\n      );\r\n    }\r\n  }, [name, tree]);\r\n\r\n  return <>{step === name && children}</>;\r\n}\r\n"],"names":["WizardContext","React","createContext","tree","step","setStep","getControls","Wizard","children","first","useEffect","allSteps","Object","keys","includes","console","warn","entries","forEach","key","dests","d","useState","possibleSteps","reduce","accum","next","Provider","value","useControls","useContext","destinations","Controls","Step","name"],"mappings":"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"}